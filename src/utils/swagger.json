{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Ip Track OpenApi",
    "description": "Api documentation for frontend",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login a user to get the user object + token",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Auth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/api/auth/verify-email/:userId/:token": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify email",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Email"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/api/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the user that we want to match"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "User with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Failed. User not found."
          }
        }
      },
      "put": {
        "summary": "Update user with given ID",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. User not found."
          }
        }
      },
      "delete": {
        "summary": "Delete User with given ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete User with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "404": {
            "description": "Failed. USer not found."
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all roles in system",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a new role",
        "requestBody": {
          "description": "role Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/api/roles/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the role that we want to match"
        }
      ],
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Role with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "404": {
            "description": "Failed. Role not found."
          }
        }
      },
      "put": {
        "summary": "Update role with given ID",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "description": "Role Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Role"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Role with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Role not found."
          }
        }
      },
      "delete": {
        "summary": "Delete Role with given ID",
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Role with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "404": {
            "description": "Failed. Role not found."
          }
        }
      }
    },
    "/api/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get list of all available permissions",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Role not found."
          }
        }
      }
    }
  },
  "definitions": {
    "id": {
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "Email": {
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "Auth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roleId": {
          "type": "number"
        },
        "companyId": {
          "type": "number"
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "permissions": {
          "type": "string[]"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/User"
          }
        }
      }
    }
  }
}